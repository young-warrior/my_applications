@using System.Data.SqlClient
@using System.Globalization
@using System.Web.UI.HtmlControls
@using NewsManager.Domain.Entities
@using NewsManager.WebUI.Models
@model NewsListModel

@{
    ViewBag.Title = "NEWS MANAGER";
}

<script>
    function deleleNews(message, id, url) {

        var serviceUrl = '/News/Delete?id=' + id;
        if (confirm(message)) {
            $.ajax({
                type: "POST",
                url: serviceUrl,
                data: param = "",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: successFunc
            });

            function successFunc(data, status) {
                window.location = url;
                console.log('Refresh page to ' + url);
            }
        }

        return false;
    }
</script>
           
<table>
    
    <tr>
        <p>@Html.ActionLink("Add a new news", "Create")</p>
    </tr>
    <tr>
        @using (Html.BeginForm(FormMethod.Get))
        {
            <p>
                Find by:
            
                @Html.RadioButton("searchBy", "Title", true)<text>Title</text>
                @Html.RadioButton("searchBy", "Categories")<text>Category</text>
                @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
                <input type="submit" value="Search" />
            </p>
            
        }
        @foreach(NewsModel item in Model.Entities)
    {
            
    }
    </tr>
    <tr bgcolor="#cccccc">
        <th>

            @Html.ActionLink("Title", "Index", new {sortOrder = ViewBag.NameSortParm, carrentFilter = ViewBag.CarrentFilter, category = Model.CurrentCategory})

        </th>
        <th>
            @Html.ActionLink("CreatedDate", "Index", new {sortOrder = ViewBag.DateSortParm, carrentFilter = ViewBag.CarrentFilter, category = Model.CurrentCategory})

        </th>
        <th>
            @Html.ActionLink("Category", "Index", new {sortOrder = ViewBag.CategoryParm, carrentFilter = ViewBag.CarrentFilter, category = Model.CurrentCategory})

        </th>
        <th>
            @Html.ActionLink("Status", "Index", new { sortOrder = ViewBag.StatusParm, carrentFilter = ViewBag.CarrentFilter, category = Model.CurrentCategory })

        </th>
        <th colspan="3">
            Actions
        </th>
    </tr>

    @foreach (NewsModel item in Model.Entities)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.TitleShort)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedDate)
            </td>
            <td>
                @*                @Html.DisplayFor(modelItem => item.BodyNews)*@
                @Html.DisplayFor(modelItem => item.Category.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Status)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new {id = item.NewsID}) 
            </td>
            <td>
                @Html.ActionLink("Details", "Details", new {id = item.NewsID})
            </td>
            <td>
                @Html.ActionLink(
                    "Delete",
                    "Index",
                    null,
                    new
                    {
                        onclick = String.Format("return deleleNews('{0}', {1}, '{2}');",
                            string.Format("Are you sure you wish to delete {0} news?", item.Title), item.NewsID,
                            String.Format("/News/Index?page={0}&category={1}&searchString={2}&sortOrder={3}", Model.PagingInfo.CurrentPage,
                                Model.CurrentCategory.HasValue ? Model.CurrentCategory.Value.ToString(CultureInfo.InvariantCulture) : "",
                                Model.SearchString,
                                Model.SortOrder))
                    })
            </td>
        </tr>
    }
</table>
           
<div class="pager ">
    @Html.PageLinks(Model.PagingInfo, x =>
    {
        if (Model.CurrentCategory == null && Model.SortOrder == null && Model.SearchString == null)
            return Url.Action("Index", new
            {
                page = x,
            });
        return
            Url.Action("Index", new
            {
                page = x,
                category = Model.CurrentCategory,
                sortOrder = Model.SortOrder,
                searchString = Model.SearchString
            });
    }
        )
</div>
      