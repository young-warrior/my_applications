@using NewsManager.WebUI.Models

@model CategoriesNewListModel
@{
    ViewBag.Title = "LIST OF CATEGORY";
    this.Layout = "../Shared/_LayoutCategory.cshtml";
}

<script>
    function deleleCategory(message, id, url) {

        var serviceUrl = '/Categories/Delete?id=' + id;
        if (confirm(message)) {
            $.ajax({
                type: "POST",
                url: serviceUrl,
                data: param = "",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success : successFunc
            });
            function successFunc(data, status) {
                window.location = url;
                console.log('Refresh page to ' + url);
            }
        }

        return false;
    }
</script>

<table class="tablecategories">
    <tr>
        <p>@Html.ActionLink("Create a new Categories", "Create")</p>
    </tr>

    <tr bgcolor ="#cccccc">

        <th>
             @Html.ActionLink("Category", "List", new { sortOrder = ViewBag.CategoryParm })
</th>
        <th colspan="2">
            Actions
        </th>
    </tr>

    @foreach (CategoryNewsModel item in Model.Entities)
    {
        <tr >
            <td>
                <div class="hidden">@Html.DisplayFor(modelItem => item.Name)</div>
</td>
            <td>
                @Html.ActionLink("Edit", "Edit", new {id = item.CategoryNewsID})
            </td>
            <td>
                @Html.ActionLink(
                    "Delete",
                    "List",
                    null,
                    new
                    {
                        onclick = String.Format("return deleleCategory('{0}', {1}, '{2}');",
                            string.Format("Are you sure you wish to delete {0} category?", item.Name), item.CategoryNewsID, 
                            String.Format("/Categories/List?page={0}", Model.PagingInfo.CurrentPage))
                    })
            </td>
        </tr>
    }
</table>
<div>
    @Html.ActionLink("Back to News", "Index", "News"
    
        )
</div>

<div class="pager ">
    @Html.PageLinks(Model.PagingInfo, x =>
    {
        if (Model.SortOrder == null && Model.PagingInfo == null)
            return Url.Action("List", new
            {
                page = x
            });
        return
            Url.Action("List", new
            {
                page = x,
                category = Model.SortOrder
                
            });
    }
        )
</div>
      






